@model dynamic

@{
    ViewBag.Title = "New Rental Form";
}

<h2>New Rental Form</h2>
<form id="newRental">
    <div class="form-group">
        <label>Customer</label>
        <div class="tt-container">
        <input id="customer" name="customer"  data-rule-validCustomer="true" required  type="text"  class="typeahead form-control" placeholder="Search For Customers"> @*How you put jquery validation on your textbox, it looks for your custom attribute*@
        </div>                                                                                                                                         @*data-rule-validCustomer="true" is the bit that does this*@   
    </div>

    <div class="form-group">
        <label>Movies</label>
        <div class="tt-container">
        <input id="movie" name="movie" data-rule-validMovie="true" class="typeahead form-control" type="text" placeholder="Search For Movies">
        </div>
    </div>

    <div class="row">
        <div class="col-md-4 col-sm-4">
            <ul id="movies" class="list-group"></ul>
        </div>
    </div>

    <button class="btn btn-primary">Submit</button>
</form>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            var vm = {
        movieIds:[]
            };

            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'), //checked
                queryTokenizer: Bloodhound.tokenizers.whitespace, //checked
                remote: {
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });
            
            $('#customer').typeahead(
                {
                    minLength: 3,
                    highlight: true
                },
                {
                    name: 'customers',
                    display: 'name',
                    source: customers
                }).on("typeahead:select", function (e, customer)
                {
                    vm.customerId = customer.id;
                });
      


            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#movie').typeahead({
                minLength: 3,
                highlight: true
            }, {
                name: 'movies',
                display: 'name',
                source: movies
            }).on("typeahead:select", function (e, movie)
            {
                $("#movies").append("<li class='list-group-item'>" + movie.name + "</li>");
                $("#movie").typeahead("val", "");

                vm.movieIds.push(movie.id);
            });

            //Stuff to look through list of searched customers with bloodhound and validate that we picked one customer.
            $.validator.addMethod("validCustomer", function () {
                return vm.customerId && vm.customerId !== 0;
            }, "Please select a valid customer.");

            //Go through our variable of vm to look if the user picked out any movies,if it didn't show him a error.
            $.validator.addMethod("validMovie", function () {
                return vm.movieIds.length > 0;
            }, "Please select a valid movie.");

            var validator = $("#newRental").validate({
                submitHandler: function ()
                {
                        $.ajax({
                            url: "/api/newrentals",
                            method: "post",
                            data: vm

                        })
                        .done(function () {
                            toastr.success("Rentals successfully recorded.");
                            $("#customer").typeahead("val", "");
                            $("#movie").typeahead("val", "");
                            $("#movies").empty();

                            vm = { movieIds: [] };

                            validator.resetForm();
                        })
                        .fail(function () {
                            toastr.error("Rentals failed to record.");

                        });

                    //End Of New Rental submit to api
                    return false;

                }//End of Submit Handler
                }); //End Of Validate

          





        });

    </script>
}